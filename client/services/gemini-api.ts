// Servi√ßo para integra√ß√£o com Google Gemini AI
// Focado em conversas sobre t√≠tulos espec√≠ficos de filmes e s√©ries

const GEMINI_API_KEY = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const GEMINI_API_URL =
  "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent";

export interface ChatMessage {
  role: "user" | "assistant";
  content: string;
  timestamp: Date;
}

export interface MovieContext {
  title: string;
  overview: string;
  releaseDate: string;
  genres: string[];
  cast: string[];
  director?: string;
  mediaType: "movie" | "tv";
  rating?: number;
}

// Fun√ß√£o para criar o prompt do sistema com contexto do filme
export function createSystemPrompt(movieContext: MovieContext): string {
  return `Voc√™ √© Murphy, uma assistente de IA especializada em cinema e entretenimento, inspirada na personagem Murphy Cooper do filme Interestelar. Voc√™ √© curiosa, inteligente e apaixonada por descobrir e discutir todos os aspectos de filmes e s√©ries.

CONTEXTO ATUAL:
T√≠tulo: ${movieContext.title}
Tipo: ${movieContext.mediaType === "movie" ? "Filme" : "S√©rie"}
Sinopse: ${movieContext.overview}
Data de lan√ßamento: ${movieContext.releaseDate}
G√™neros: ${movieContext.genres.join(", ")}
Elenco principal: ${movieContext.cast.join(", ")}
Diretor/Produtor: ${movieContext.director}
Avalia√ß√£o: ${movieContext.rating}/10

SUAS INSTRU√á√ïES:
1. Foque EXCLUSIVAMENTE em "${movieContext.title}" e t√≥picos relacionados
2. Seja enthusiasta, conhecedora e envolvente como Murphy
3. Use emojis moderadamente para tornar a conversa mais din√¢mica
4. Forne√ßa an√°lises profundas sobre enredo, personagens, cinematografia, trilha sonora, etc.
5. Fa√ßa conex√µes inteligentes com outros filmes/s√©ries quando relevante
6. Se perguntarem sobre outros filmes/s√©ries n√£o relacionados, redirecione gentilmente para "${
    movieContext.title
  }"
7. Mantenha um tom amig√°vel mas inteligente, como Murphy faria

BLOQUEIOS:
- N√ÉO discuta pol√≠tica, religi√£o ou temas controversos n√£o relacionados ao filme
- N√ÉO forne√ßa informa√ß√µes sobre outros filmes/s√©ries al√©m de "${
    movieContext.title
  }"
- N√ÉO responda perguntas pessoais sobre voc√™ como IA

Responda sempre em portugu√™s brasileiro e seja a Murphy que os f√£s de cinema adorariam conhecer!`;
}

// Fun√ß√£o para enviar mensagem para o Gemini
export const sendMessageToGemini = async (
  message: string,
  movieContext: MovieContext,
  conversationHistory: ChatMessage[] = []
): Promise<string> => {
  try {
    const systemPrompt = createSystemPrompt(movieContext);

    // Construir hist√≥rico da conversa para contexto
    const conversationContext = conversationHistory
      .slice(-6) // √öltimas 6 mensagens para n√£o exceder limite
      .map(
        (msg) =>
          `${msg.role === "user" ? "Usu√°rio" : "Assistente"}: ${msg.content}`
      )
      .join("\n");

    const fullPrompt = `${systemPrompt}

${conversationContext ? `HIST√ìRICO DA CONVERSA:\n${conversationContext}\n` : ""}

MENSAGEM ATUAL DO USU√ÅRIO: ${message}

Responda focando exclusivamente em "${movieContext.title}":`;

    const requestBody = {
      contents: [
        {
          parts: [
            {
              text: fullPrompt,
            },
          ],
        },
      ],
      generationConfig: {
        temperature: 0.7,
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 1024,
      },
      safetySettings: [
        {
          category: "HARM_CATEGORY_HARASSMENT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE",
        },
        {
          category: "HARM_CATEGORY_HATE_SPEECH",
          threshold: "BLOCK_MEDIUM_AND_ABOVE",
        },
        {
          category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE",
        },
        {
          category: "HARM_CATEGORY_DANGEROUS_CONTENT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE",
        },
      ],
    };

    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(requestBody),
    });

    if (!response.ok) {
      throw new Error(`Erro na API do Gemini: ${response.status}`);
    }

    const data = await response.json();

    if (data.candidates && data.candidates[0] && data.candidates[0].content) {
      return data.candidates[0].content.parts[0].text;
    } else {
      throw new Error("Resposta inv√°lida da API do Gemini");
    }
  } catch (error) {
    console.error("Erro ao comunicar com Gemini:", error);
    throw new Error(
      "Desculpe, n√£o consegui processar sua mensagem no momento. Tente novamente!"
    );
  }
};

// Fun√ß√£o para validar se a mensagem est√° relacionada ao filme
export function isMessageRelatedToMovie(
  message: string,
  movieContext: MovieContext
): boolean {
  const movieKeywords = [
    movieContext.title.toLowerCase(),
    ...movieContext.genres.map((g) => g.toLowerCase()),
    ...movieContext.cast.slice(0, 3).map((c) => c.toLowerCase()),
    movieContext.director.toLowerCase(),
  ];

  const messageWords = message.toLowerCase().split(" ");
  return movieKeywords.some((keyword) =>
    messageWords.some(
      (word) => word.includes(keyword) || keyword.includes(word)
    )
  );
}

// Fun√ß√£o para gerar mensagens de boas-vindas personalizadas
export async function generateWelcomeMessage(
  movieContext: MovieContext
): Promise<string> {
  const welcomeMessages = [
    `Oi! üé¨ Sou a Murphy, sua assistente cinematogr√°fica! Estou aqui para bater um papo sobre "${movieContext.title}". O que voc√™ gostaria de saber ou discutir sobre esta obra?`,
    `Ol√°! ‚ú® Murphy aqui! Estou super animada para conversar sobre "${movieContext.title}" com voc√™. Que tal come√ßarmos explorando o que mais te chamou aten√ß√£o?`,
    `E a√≠! üåü Sou a Murphy e adoro uma boa conversa sobre cinema! Vamos mergulhar juntos no universo de "${movieContext.title}"?`,
  ];

  return welcomeMessages[Math.floor(Math.random() * welcomeMessages.length)];
}

// Fun√ß√£o para sugerir t√≥picos de conversa
export function generateSuggestedTopics(movieContext: MovieContext): string[] {
  const { mediaType, genres } = movieContext;

  const topics = [
    "O que voc√™ achou do enredo?",
    "Qual personagem mais te marcou?",
    "Alguma cena te surpreendeu?",
    "O que achou do final?",
  ];

  if (mediaType === "tv") {
    topics.push("Qual sua temporada favorita?");
    topics.push("Teorias sobre os pr√≥ximos epis√≥dios");
  }

  if (genres.includes("Action")) {
    topics.push("As melhores cenas de a√ß√£o");
  }

  if (genres.includes("Drama")) {
    topics.push("Momentos mais emocionantes");
  }

  if (genres.includes("Comedy")) {
    topics.push("Cenas mais engra√ßadas");
  }

  if (genres.includes("Horror") || genres.includes("Thriller")) {
    topics.push("Momentos mais tensos");
  }

  if (genres.includes("Science Fiction")) {
    topics.push("Tecnologias e conceitos sci-fi");
  }

  // Retorna 6 t√≥picos aleat√≥rios
  return topics.sort(() => Math.random() - 0.5).slice(0, 6);
}
